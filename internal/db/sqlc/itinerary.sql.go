// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: itinerary.sql

package db

import (
	"context"
	"time"
)

const createTrip = `-- name: CreateTrip :one
INSERT INTO itineraries(
    owner,
    take_off_date,
    return_date,
    destination
) VALUES (
    $1, $2, $3, $4
) RETURNING id, owner, take_off_date, return_date, destination, created_at
`

type CreateTripParams struct {
	Owner       int64     `json:"owner"`
	TakeOffDate time.Time `json:"take_off_date"`
	ReturnDate  time.Time `json:"return_date"`
	Destination string    `json:"destination"`
}

func (q *Queries) CreateTrip(ctx context.Context, arg CreateTripParams) (Itinerary, error) {
	row := q.queryRow(ctx, q.createTripStmt, createTrip,
		arg.Owner,
		arg.TakeOffDate,
		arg.ReturnDate,
		arg.Destination,
	)
	var i Itinerary
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.TakeOffDate,
		&i.ReturnDate,
		&i.Destination,
		&i.CreatedAt,
	)
	return i, err
}

const deleteItinerary = `-- name: DeleteItinerary :exec
DELETE FROM itineraries WHERE owner = $1
`

func (q *Queries) DeleteItinerary(ctx context.Context, owner int64) error {
	_, err := q.exec(ctx, q.deleteItineraryStmt, deleteItinerary, owner)
	return err
}

const getTripUpdate = `-- name: GetTripUpdate :one
SELECT FROM itineraries
WHERE owner = $1
LIMIT 1
FOR NO KEY UPDATE
`

type GetTripUpdateRow struct {
}

func (q *Queries) GetTripUpdate(ctx context.Context, owner int64) (GetTripUpdateRow, error) {
	row := q.queryRow(ctx, q.getTripUpdateStmt, getTripUpdate, owner)
	var i GetTripUpdateRow
	err := row.Scan()
	return i, err
}

const listTrips = `-- name: ListTrips :many
SELECT FROM itineraries
WHERE owner = $1
LIMIT $2
OFFSET $3
`

type ListTripsParams struct {
	Owner  int64 `json:"owner"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListTripsRow struct {
}

func (q *Queries) ListTrips(ctx context.Context, arg ListTripsParams) ([]ListTripsRow, error) {
	rows, err := q.query(ctx, q.listTripsStmt, listTrips, arg.Owner, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListTripsRow{}
	for rows.Next() {
		var i ListTripsRow
		if err := rows.Scan(); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
