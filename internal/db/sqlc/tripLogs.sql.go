// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tripLogs.sql

package db

import (
	"context"
	"encoding/json"
)

const createTripLogs = `-- name: CreateTripLogs :one
INSERT INTO trip_logs(
    trip_owner,
    logs
) VALUES (
    $1, $2
) RETURNING id, trip_owner, logs
`

type CreateTripLogsParams struct {
	TripOwner int64           `json:"trip_owner"`
	Logs      json.RawMessage `json:"logs"`
}

func (q *Queries) CreateTripLogs(ctx context.Context, arg CreateTripLogsParams) (TripLog, error) {
	row := q.queryRow(ctx, q.createTripLogsStmt, createTripLogs, arg.TripOwner, arg.Logs)
	var i TripLog
	err := row.Scan(&i.ID, &i.TripOwner, &i.Logs)
	return i, err
}

const deleteTripLogs = `-- name: DeleteTripLogs :exec
DELETE FROM trip_logs WHERE trip_owner = &1
`

func (q *Queries) DeleteTripLogs(ctx context.Context) error {
	_, err := q.exec(ctx, q.deleteTripLogsStmt, deleteTripLogs)
	return err
}

const getATripLogUpdate = `-- name: GetATripLogUpdate :one
SELECT FROM trip_logs
WHERE trip_owner = $1
LIMIT 1
FOR NO KEY UPDATE
`

type GetATripLogUpdateRow struct {
}

func (q *Queries) GetATripLogUpdate(ctx context.Context, tripOwner int64) (GetATripLogUpdateRow, error) {
	row := q.queryRow(ctx, q.getATripLogUpdateStmt, getATripLogUpdate, tripOwner)
	var i GetATripLogUpdateRow
	err := row.Scan()
	return i, err
}

const listTripLogs = `-- name: ListTripLogs :many
SELECT FROM trip_logs
WHERE trip_owner = $1
LIMIT $2
OFFSET $3
`

type ListTripLogsParams struct {
	TripOwner int64 `json:"trip_owner"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

type ListTripLogsRow struct {
}

func (q *Queries) ListTripLogs(ctx context.Context, arg ListTripLogsParams) ([]ListTripLogsRow, error) {
	rows, err := q.query(ctx, q.listTripLogsStmt, listTripLogs, arg.TripOwner, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListTripLogsRow{}
	for rows.Next() {
		var i ListTripLogsRow
		if err := rows.Scan(); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
