// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    fullname,
    username, 
    email, 
    hashed_password,
    phone_number
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, fullname, username, email, hashed_password, phone_number, trip_state, created_at
`

type CreateUserParams struct {
	Fullname       string `json:"fullname"`
	Username       string `json:"username"`
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
	PhoneNumber    string `json:"phone_number"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.Fullname,
		arg.Username,
		arg.Email,
		arg.HashedPassword,
		arg.PhoneNumber,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.PhoneNumber,
		&i.TripState,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = &1
`

func (q *Queries) DeleteUser(ctx context.Context) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, fullname, username, email, hashed_password, phone_number, trip_state, created_at FROM users 
WHERE username = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.PhoneNumber,
		&i.TripState,
		&i.CreatedAt,
	)
	return i, err
}

const getUserForUpdate = `-- name: GetUserForUpdate :one
SELECT id, fullname, username, email, hashed_password, phone_number, trip_state, created_at FROM users
WHERE username = $1
LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetUserForUpdate(ctx context.Context, username string) (User, error) {
	row := q.queryRow(ctx, q.getUserForUpdateStmt, getUserForUpdate, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.PhoneNumber,
		&i.TripState,
		&i.CreatedAt,
	)
	return i, err
}
